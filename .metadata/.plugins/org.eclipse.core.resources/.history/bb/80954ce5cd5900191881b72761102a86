/*
 * Command.cpp
 *
 *  Created on: Apr 7, 2019
 *      Author: alex
 */

#include "Command.h"
#include "Entity381.h"

Command::Command(Entity381* ent)
{
	entity = ent;
	isDone = false;
	physics = nullptr;
}

Command::~Command()
{

}

void Command::init()
{
	physics = (PhysicsAspect*) entity->GetAspect(1);
}

void Command::tick(float dt)
{

}

bool Command::done()
{
	return isDone;
}

MoveTo::MoveTo(Entity381* ent, Ogre::Vector3 target) : Command(ent)
{
	targetLocation = target;
	MOVE_DISTANCE_THRESHOLD = 100;
	acceptanceRadius = 5;
}

MoveTo::~MoveTo()
{

}

void MoveTo::tick(float dt)
{
	float distance = entity->mPosition->distance(targetLocation);

	Ogre::Vector3 acc = (*entity->mPosition - targetLocation)
			/ (*entity->mPosition - targetLocation).normalise();

	Ogre::Vector3 direction = entity->HeaderToDirection();

	if (distance > acceptanceRadius)
	{
		physics->Accelerate(acc);
	}
	else
	{
		isDone = true;
	}
}

Intercept::Intercept(Entity381* ent, Ogre::Vector3 target) : Command(ent)
{
	targetLocation = target;
	MOVE_DISTANCE_THRESHOLD = 100;
	acceptanceRadius = 100;
}

Intercept::~Intercept()
{

}

void Intercept::tick(float dt)
{

}
